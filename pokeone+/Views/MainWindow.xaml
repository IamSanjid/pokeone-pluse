<Window x:Class="pokeone_plus.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:pokeone_plus"
        xmlns:fa="http://schemas.fontawesome.io/icons/"
        mc:Ignorable="d"
        Height="600" Width="800"
        WindowStyle="None"
        MouseLeftButtonDown="Grid_MouseLeftButtonDown"  Background="#2D2D30"
        WindowStartupLocation="CenterScreen" Icon="../pokeone+icon.ico" AllowDrop="True" Drop="Window_Drop">
    <Window.Resources>
        <Style TargetType="{x:Type Button}">
            <Setter Property="Background" Value="#2D2D30"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#3F3F41"/>
                </Trigger>
                <Trigger Property="IsMouseOver" Value="False">
                    <Setter Property="Background" Value="#333337"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Color x:Key="lightBlueColor">#FF145E9D</Color>
        <Color x:Key="darkBlueColor">#FF022D51</Color>
        <Color x:Key="redColor">#FFAA2C27</Color>
        <Color x:Key="greenColor">#FF656A03</Color>
        <Color x:Key="brownColor">#FF513100</Color>
        <SolidColorBrush x:Key="redBrush"
                         Color="{StaticResource redColor}"/>
        <SolidColorBrush x:Key="greenBrush"
                         Color="{StaticResource greenColor}"/>
        <SolidColorBrush x:Key="brownBrush"
                         Color="{StaticResource brownColor}"/>

        <LinearGradientBrush x:Key="menuBrush" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FF3A60AD" Offset="0.528"/>
            <GradientStop Color="#FF6A85D8" Offset="0.01"/>
            <GradientStop Color="#FF3464C4" Offset="1"/>
            <GradientStop Color="#FF202E7E" Offset="1"/>

        </LinearGradientBrush>
        <Style TargetType="{x:Type MenuItem}" x:Key="NoBorderMenu">
            <Setter Property="BorderThickness" Value="1"></Setter>
            <Setter Property="BorderBrush" Value="White"></Setter>
            <Setter Property="Foreground" Value="#F1F1F1"></Setter>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type MenuItem}">
                        <Border x:Name="Border" BorderThickness="{TemplateBinding BorderThickness}" Margin="0,0,1,0" >
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition x:Name="Col0" MinWidth="17" Width="Auto" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                    <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                    <ColumnDefinition x:Name="Col3" Width="*"/>
                                    <ColumnDefinition x:Name="Col4" Width="*"/>
                                </Grid.ColumnDefinitions>
                                <!-- ContentPresenter to show an Icon if needed -->
                                <ContentPresenter Grid.Column="0" Margin="4,0,6,0" x:Name="Icon" VerticalAlignment="Center" ContentSource="Icon"/>
                                <!-- Glyph is a checkmark if needed for a checkable menu -->
                                <Grid Grid.Column="0" Visibility="Hidden" Margin="4,0,6,0" x:Name="GlyphPanel" VerticalAlignment="Center">
                                    <Path x:Name="GlyphPanelpath" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,2 L0,4.8 L2.5,7.4 L7.1,2.8 L7.1,0 L2.5,4.6 z" FlowDirection="LeftToRight"/>
                                </Grid>
                                <!-- Content for the menu text etc -->
                                <ContentPresenter Grid.Column="1"  
                                Margin="{TemplateBinding Padding}"  
                                x:Name="HeaderHost"  
                                RecognizesAccessKey="True"  
                                ContentSource="Header" VerticalAlignment="Center"/>
                                <!-- Content for the menu IGT -->
                                <ContentPresenter Grid.Column="2"  
                                        Margin="8,1,8,1"  
                                        x:Name="IGTHost"  
                                        ContentSource="InputGestureText"  
                                        VerticalAlignment="Center"/>
                                <!-- Arrow drawn path which points to the next level of the menu -->
                                <Grid Grid.Column="3" Margin="4,0,6,0" x:Name="ArrowPanel" VerticalAlignment="Center">
                                    <!--<Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z"/>-->
                                    <Path Visibility="Hidden" x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Stretch" Fill="{TemplateBinding Foreground}" Data="M0,0 L0,8 L4,4 z" RenderTransformOrigin="0.5,0.5" Margin="0,-0.063,2,0.062" d:LayoutOverrides="Height">
                                        <Path.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform/>
                                                <SkewTransform/>
                                                <RotateTransform Angle="88.864"/>
                                                <TranslateTransform/>
                                            </TransformGroup>
                                        </Path.RenderTransform>
                                    </Path>
                                </Grid>
                                <!-- The Popup is the body of the menu which expands down or across depending on the level of the item -->
                                <Popup  IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}" Placement="Bottom" x:Name="SubMenuPopup" Focusable="true" PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}">
                                    <Border x:Name="SubMenuBorder" BorderBrush="#1B1B1C" BorderThickness="0" Padding="1,1,1,1">
                                        <Grid x:Name="SubMenu" Grid.IsSharedSizeScope="True"  >
                                            <!-- StackPanel holds children of the menu. This is set by IsItemsHost=True -->
                                            <StackPanel Background="#1B1B1C" IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle" Style="{x:Null}" Grid.IsSharedSizeScope="True" >
                                            </StackPanel>
                                        </Grid>
                                    </Border>
                                </Popup>
                            </Grid>
                        </Border>

                        <!-- These triggers re-configure the four arrangements of MenuItem to show different levels of menu via Role -->
                        <ControlTemplate.Triggers>
                            <!-- Role = TopLevelHeader : this is the root menu item in a menu; the Popup expands down -->
                            <Trigger Property="Role" Value="TopLevelHeader">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Placement" Value="Bottom" TargetName="SubMenuPopup"/>
                                <Setter Property="MinWidth" Value="0" TargetName="Col0"/>
                                <Setter Property="Width" Value="Auto" TargetName="Col3"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="GlyphPanel"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="IGTHost"/>
                                <Setter Property="Visibility" Value="Visible" TargetName="ArrowPanel"/>
                            </Trigger>
                            <!-- Role = TopLevelItem :  this is a child menu item from the top level without any child items-->
                            <Trigger Property="Role" Value="TopLevelItem">
                                <Setter Property="Padding" Value="6,1,6,1"/>
                                <Setter Property="Width" Value="110" />
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <!-- Role = SubMenuHeader : this is a child menu item which does not have children -->
                            <Trigger Property="Role" Value="SubmenuHeader">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                            </Trigger>
                            <!-- Role = SubMenuItem : this is a child menu item which has children-->
                            <Trigger Property="Role" Value="SubmenuItem">
                                <Setter Property="DockPanel.Dock" Value="Top"/>
                                <Setter Property="Padding" Value="0,2,0,2"/>
                                <Setter Property="Visibility" Value="Collapsed" TargetName="ArrowPanel"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="true">
                                <Setter Property="PopupAnimation" Value="Scroll" TargetName="SubMenuPopup"/>
                            </Trigger>
                            <Trigger Property="IsSuspendingPopupAnimation" Value="False">
                                <Setter Property="PopupAnimation" Value="Scroll" TargetName="SubMenuPopup"/>
                            </Trigger>
                            <!-- If no Icon is present the we collapse the Icon Content -->
                            <Trigger Property="Icon" Value="{x:Null}">
                                <Setter Property="Visibility" Value="Collapsed" TargetName="Icon"/>
                            </Trigger>
                            <!-- Using the system colors for the Menu Highlight and IsEnabled-->
                            <Trigger Property="IsHighlighted" Value="true">
                                <Setter Property="Foreground" Value="#5092fc"/>
                            </Trigger>

                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="PopupAnimation" Value="Scroll" TargetName="SubMenuPopup"/>
                                <Setter Property="Foreground" Value="#FF5092FC"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#3F3F41"/>
                </Trigger>
            </Style.Triggers>
        </Style>
        <Style  TargetType="{x:Type Menu}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Menu}">
                        <Border Name="MainBorder" BorderThickness="1,1,1,1" Margin="0,0,1,0">
                            <WrapPanel ClipToBounds="True"
                        Orientation="Horizontal"
                        IsItemsHost="True" />
                        </Border>

                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <LinearGradientBrush x:Key="CheckedBlue" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#1E1E1E" Offset="0" />
            <GradientStop Color="#1F1F1F" Offset="1" />
        </LinearGradientBrush>

        <LinearGradientBrush x:Key="GridViewColumnHeaderBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFFFFFFF" Offset="0"/>
            <GradientStop Color="#FFFFFFFF" Offset="0.4091"/>
            <GradientStop Color="#FFF7F8F9" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="GridViewColumnHeaderBorderBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFF2F2F2" Offset="0"/>
            <GradientStop Color="#FFD5D5D5" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="GridViewColumnHeaderHoverBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FFBDEDFF" Offset="0"/>
            <GradientStop Color="#FFB7E7FB" Offset="1"/>
        </LinearGradientBrush>
        <LinearGradientBrush x:Key="GridViewColumnHeaderPressBackground" EndPoint="0,1" StartPoint="0,0">
            <GradientStop Color="#FF8DD6F7" Offset="0"/>
            <GradientStop Color="#FF8AD1F5" Offset="1"/>
        </LinearGradientBrush>

        <Style TargetType="{x:Type GridViewColumnHeader}">
            <Setter Property="Foreground" Value="#F1F1F1" />
            <Setter Property="Width" Value="Auto"/>
            <Setter Property="Height" Value="Auto"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                        <Grid SnapsToDevicePixels="true">
                            <VisualStateManager.VisualStateGroups>
                                <VisualStateGroup x:Name="CommonStates"/>
                                <VisualStateGroup x:Name="FocusStates"/>
                                <VisualStateGroup x:Name="ValidationStates"/>
                            </VisualStateManager.VisualStateGroups>
                            <Border x:Name="HeaderBorder" BorderBrush="#333337" BorderThickness="0,1,0,1" Background="#333337">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition MaxHeight="7"/>
                                        <RowDefinition/>
                                    </Grid.RowDefinitions>
                                    <Rectangle x:Name="UpperHighlight" Fill="#3F3F46" Visibility="Collapsed"/>
                                    <Border Padding="{TemplateBinding Padding}" Grid.RowSpan="2">
                                        <ContentPresenter x:Name="HeaderContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0,0,0,1" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                    </Border>
                                </Grid>
                            </Border>
                            <Border x:Name="HeaderHoverBorder" BorderThickness="1,0,1,1" Margin="1,1,0,0"/>
                            <Border x:Name="HeaderPressBorder" BorderThickness="1,1,1,0" Margin="1,0,0,1"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="HeaderBorder" Value="#3F3F46"/>
                                <Setter Property="BorderBrush" TargetName="HeaderHoverBorder" Value="#3F3F46"/>
                                <Setter Property="Visibility" TargetName="UpperHighlight" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="HeaderBorder" Value="#3F3F46"/>
                                <Setter Property="BorderBrush" TargetName="HeaderHoverBorder" Value="#3F3F46"/>
                                <Setter Property="BorderBrush" TargetName="HeaderPressBorder" Value="#3F3F46"/>
                                <Setter Property="Visibility" TargetName="UpperHighlight" Value="Hidden"/>
                                <Setter Property="Fill" TargetName="UpperHighlight" Value="#3F3F46"/>
                                <Setter Property="Margin" TargetName="HeaderContent" Value="1,1,0,0"/>
                            </Trigger>
                            <Trigger Property="Height" Value="Auto">
                                <Setter Property="MinHeight" Value="20"/>
                            </Trigger>
                            <Trigger Property="Width" Value="Auto">
                                <Setter Property="MinWidth" Value="20"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="Role" Value="Floating">
                    <Setter Property="Opacity" Value="0.4082"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                <Canvas x:Name="PART_FloatingHeaderCanvas">
                                    <Rectangle Fill="#FF000000" Height="{TemplateBinding ActualHeight}" Opacity="0.4697" Width="{TemplateBinding ActualWidth}"/>
                                </Canvas>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                <Trigger Property="Role" Value="Padding">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type GridViewColumnHeader}">
                                <Border x:Name="HeaderBorder" BorderBrush="#333337" BorderThickness="0,1,0,1" Background="#333337"/>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="Height" Value="Auto">
                                        <Setter Property="MinHeight" Value="20"/>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Trigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="CheckedBlueBorder" Color="#1E1E1E" />
        <Style x:Key="SwitchStyle" TargetType="{x:Type CheckBox}">
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <ControlTemplate.Resources>
                            <Storyboard x:Key="OnChecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="30" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                            <Storyboard x:Key="OnUnchecking">
                                <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetName="slider" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                    <SplineDoubleKeyFrame KeyTime="00:00:00.1000000" Value="0" />
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </ControlTemplate.Resources>
                        <DockPanel x:Name="dockPanel">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" ContentTemplate="{TemplateBinding ContentTemplate}" RecognizesAccessKey="True" VerticalAlignment="Center" />
                            <Grid>
                                <Border x:Name="BackgroundBorder" BorderBrush="#1E1E1E" BorderThickness="1" CornerRadius="3" Height="25" Width="60">
                                    <Border.Background>
                                        <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                            <GradientStop Color="#1E1E1E" Offset="0" />
                                            <GradientStop Color="#2D2D30" Offset="1" />
                                        </LinearGradientBrush>
                                    </Border.Background>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition />
                                            <ColumnDefinition />
                                        </Grid.ColumnDefinitions>
                                        <TextBlock Name="On" Grid.Column="0" HorizontalAlignment="Center" VerticalAlignment="Center" Text="ON" />
                                        <TextBlock Name="Off" Grid.Column="1" HorizontalAlignment="Center" VerticalAlignment="Center" Text="OFF" />
                                    </Grid>
                                </Border>
                                <Border BorderBrush="#1E1E1E" HorizontalAlignment="Left" x:Name="slider" Width="30" Height="20" BorderThickness="1" CornerRadius="10" RenderTransformOrigin="0.5,0.5" Margin="0">
                                    <Border.RenderTransform>
                                        <TransformGroup>
                                            <ScaleTransform ScaleX="1" ScaleY="1" />
                                            <SkewTransform AngleX="0" AngleY="0" />
                                            <RotateTransform Angle="0" />
                                            <TranslateTransform X="0" Y="0" />
                                        </TransformGroup>
                                    </Border.RenderTransform>
                                    <Border.Background>
                                        <LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
                                            <GradientStop Color="#FFF0F0F0" Offset="0" />
                                            <GradientStop Color="#FFCDCDCD" Offset="0.984" />
                                            <GradientStop Color="#FF1E1E1E" />
                                            <GradientStop Color="#FF464646" Offset="0.1"/>
                                        </LinearGradientBrush>
                                    </Border.Background>
                                </Border>
                            </Grid>
                        </DockPanel>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnUnchecking}" x:Name="OnUnchecking_BeginStoryboard" />
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource OnChecking}" x:Name="OnChecking_BeginStoryboard" />
                                </Trigger.EnterActions>
                                <Setter TargetName="BackgroundBorder" Property="Background" Value="{StaticResource CheckedBlue}" />
                                <Setter TargetName="BackgroundBorder" Property="BorderBrush" Value="{StaticResource CheckedBlueBorder}" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.CommandBindings>
        <CommandBinding Command="New" Executed="ReloadHotKey_Executed" />
    </Window.CommandBindings>
    <Window.InputBindings>
        <KeyBinding Key="R" Modifiers="Control" Command="New"/>
    </Window.InputBindings>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="auto"/>
            <RowDefinition Height="*"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <local:TitleBar Grid.ColumnSpan="3" Grid.Row="0" Margin="0 2 0 0" x:Name="TitleBar"/>
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="auto" />
                <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <DockPanel Grid.Column="0" Height="21" Margin="5 5 0 8">
                <Menu BorderBrush="{x:Null}"  HorizontalAlignment="Left" DockPanel.Dock="Top">
                    <MenuItem Style="{StaticResource NoBorderMenu}" BorderThickness="0" Header="_Bot">
                        <MenuItem Foreground="#F1F1F1" Click="MenuItem_Click" BorderThickness="0" BorderBrush="{x:Null}" Header="_Open Another Bot"/>
                        <MenuItem Foreground="#F1F1F1" BorderThickness="0" BorderBrush="{x:Null}" Name="LoginMenuItem" Click="LoginButton_Click"  Header="_Login"/>
                        <MenuItem Foreground="#F1F1F1" IsEnabled="False" BorderThickness="0" BorderBrush="{x:Null}" Name="LogoutMenuItem" Click="Logout_Click"  Header="_Logout"/>
                        <MenuItem Foreground="#F1F1F1" Click="MenuItem_Click_1" BorderThickness="0" BorderBrush="{x:Null}" Header="_Exit"/>
                    </MenuItem>
                    <MenuItem Style="{StaticResource NoBorderMenu}" BorderThickness="0" Header="Script">
                        <MenuItem Foreground="#F1F1F1" x:Name="StartScriptMenuItem" Click="StartScriptButton_Click" BorderThickness="0" BorderBrush="{x:Null}"  Header="_Start Script"/>
                        <MenuItem Foreground="#F1F1F1" x:Name="StopScriptMenuItem" Click="StopScriptButton_Click" BorderThickness="0" BorderBrush="{x:Null}" Header="_Stop Script"/>
                        <Separator BorderBrush="{x:Null}" Background="#2D2D30"/>
                        <MenuItem Foreground="#F1F1F1" x:Name="MenuPathScript" Click="LoadScriptButton_Click" BorderThickness="0" BorderBrush="{x:Null}"  Header="_Load Script"/>
                        <MenuItem Foreground="#F1F1F1" x:Name="ReloadScriptMenuItem" Click="ReloadScript_Click" BorderThickness="0" BorderBrush="{x:Null}" Header="_Reload Script"/>
                    </MenuItem>
                    <MenuItem Style="{StaticResource NoBorderMenu}"  BorderThickness="0" Header="_Help">
                        <MenuItem Foreground="#F1F1F1" BorderThickness="0" BorderBrush="{x:Null}" Click="SourceCode_View_Click" Header="_Source Code (GitHub)"/>
                        <MenuItem Foreground="#F1F1F1" BorderThickness="0" BorderBrush="{x:Null}" Click="LuaApi_View_Click" Header="_Lua Api(s)"/>
                        <MenuItem Foreground="#F1F1F1" BorderThickness="0" BorderBrush="{x:Null}" Click="Donate_Click" Header="_Donate (PayPal)"/>
                        <MenuItem Foreground="#F1F1F1" BorderThickness="0" BorderBrush="{x:Null}" Click="About_Click" Header="_About"/>
                    </MenuItem>
                </Menu>
            </DockPanel>
            <DockPanel Grid.Column="2" Background="{x:Null}" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="8,2">
                <TextBlock Name="StatusIcon" Foreground="#F1F1F1" FontSize="15" Margin="8,2,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="LightbulbOutline" VerticalAlignment="Center" Foreground="#F1F1F1" />
                </TextBlock>
                <TextBlock Name="StatusText" Text="Offline" Foreground="Red" Margin="2,2,2,2" VerticalAlignment="Center"/>
                <TextBlock Name="PokeTimeIcon" Foreground="White" FontSize="15" Margin="8,2,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="ClockOutline" VerticalAlignment="Center" Foreground="#F1F1F1" />
                </TextBlock>
                <TextBlock Name="PokeTimeText" Text="??:??" Margin="2,2,2,2" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                <TextBlock Name="MapNameIcon" Foreground="#FF101020" FontSize="15" Margin="8,2,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="MapOutline" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                </TextBlock>
                <TextBlock Name="MapNameText" Text="Not Loaded" Margin="2,2,2,2" VerticalAlignment="Center" Foreground="#F1F1F1">
                    <TextBlock.ToolTip>
                        <ToolTip Background="#1E1E1E">
                            <TextBlock Name="AreaNameTip" Text="Area Name" Background="#1E1E1E" Foreground="#F1F1F1"/>
                        </ToolTip>
                    </TextBlock.ToolTip>
                </TextBlock>
                <TextBlock Name="PlayerPositionIcon" Foreground="#F1F1F1" FontSize="15" Margin="8,2,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="MapMarker" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                </TextBlock>
                <TextBlock Name="PlayerPositionText" Text="(?,?)" Margin="2,2,2,4" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                <TextBlock Name="LevelIcon" Foreground="#F1F1F1" FontSize="15" Margin="8,4,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="LevelUp" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                </TextBlock>
                <TextBlock Name="LevelText" Width="Auto" Text="??" Margin="2,2,2,2" VerticalAlignment="Center" Foreground="#F1F1F1">
                    <TextBlock.ToolTip>
                        <ToolTip Background="#1E1E1E">
                            <TextBlock Text="Level" Background="#1E1E1E" Foreground="#F1F1F1"/>
                        </ToolTip>
                    </TextBlock.ToolTip>
                </TextBlock>
                <TextBlock Name="MoneyIcon" Foreground="#F1F1F1" FontSize="15" Margin="8,4,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="Dollar" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                </TextBlock>
                <TextBlock Name="MoneyText" Width="Auto" Text="?" Margin="2,2,2,2" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                <TextBlock Name="GoldIcon" Foreground="#F1F1F1" FontSize="15" Margin="8,4,2,2" VerticalAlignment="Center">
                    <fa:FontAwesome Icon="Bitcoin" VerticalAlignment="Center" Foreground="#F1F1F1"/>
                </TextBlock>
                <TextBlock Name="GoldText" Width="Auto" Text="?" Margin="2,2,2,2" VerticalAlignment="Center" Foreground="#F1F1F1"/>
            </DockPanel>
        </Grid>
        <Grid Grid.Row="2" Background="{x:Null}">
            <WrapPanel VerticalAlignment="Center" Margin="4, 2, 4, 2">
                <Button x:Name="LoginButton" Margin="2,1,2,1" Foreground="#F1F1F1" Click="LoginButton_Click">
                    <Button.Content>
                        <fa:FontAwesome Name="LoginButtonIcon"  Foreground="#F1F1F1" Icon="SignIn" Padding="2, 2, 2, 2" FontSize="16">
                        </fa:FontAwesome>
                    </Button.Content>
                </Button>
                <Button Margin="2,1,2,1" Foreground="#F1F1F1" Name="StartScriptButton" Click="StartScriptButton_Click">
                    <Button.Content>
                        <fa:FontAwesome Name="StartScriptButtonIcon"  Foreground="#F1F1F1" Icon="Play" Padding="2, 2, 2, 2" FontSize="16">
                        </fa:FontAwesome>
                    </Button.Content>
                </Button>
                <Button x:Name="StopScriptButton" Margin="2,1,2,1" Foreground="#F1F1F1" Click="StopScriptButton_Click">
                    <Button.Content>
                        <fa:FontAwesome Name="StopScriptButtonIcon" Foreground="#F1F1F1" Icon="Stop" Padding="2, 2, 2, 2" FontSize="16">
                        </fa:FontAwesome>
                    </Button.Content>
                </Button>
                <Button x:Name="LoadScriptButton" Margin="2,1,2,1" Foreground="#F1F1F1" Click="LoadScriptButton_Click">
                    <Button.Content>
                        <fa:FontAwesome Name="LoadScriptButtonIcon" Foreground="#F1F1F1" Icon="Folder" Padding="2, 2, 2, 2" FontSize="16">
                        </fa:FontAwesome>
                    </Button.Content>
                </Button>
                <CheckBox x:Name="AutoEvolveSwitch" Style="{StaticResource SwitchStyle}" Margin="2,1,2,1" Content="Auto-evolve: " Checked="AutoEvolveSwitch_Checked" Unchecked="AutoEvolveSwitch_Unchecked" Foreground="#F1F1F1" Background="White">
                    <CheckBox.ToolTip>
                        <ToolTip Background="#1E1E1E">
                            <TextBlock Background="#1E1E1E" Foreground="#F1F1F1">Always evolve a pokemon if on else not going to evolve a pokemon.</TextBlock>
                        </ToolTip>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox x:Name="OpenLootBox" Style="{StaticResource SwitchStyle}" Margin="2,1,2,1" Content="Open Loot Boxes: " Checked="OpenLootBox_Checked" Unchecked="OpenLootBox_Unchecked" Foreground="#F1F1F1">
                    <CheckBox.ToolTip>
                        <ToolTip Background="#1E1E1E">
                            <TextBlock Background="#1E1E1E" Foreground="#F1F1F1">Auto opens Loot Boxes if have received one.</TextBlock>
                        </ToolTip>
                    </CheckBox.ToolTip>
                </CheckBox>
                <CheckBox x:Name="AutoReconnectSwitch" Style="{StaticResource SwitchStyle}" Margin="2,1,2,1" Content="Auto-reconnect: " Checked="AutoReconnectSwitch_Checked" Unchecked="AutoReconnectSwitch_Unchecked" Foreground="#F1F1F1">
                    <CheckBox.ToolTip>
                        <ToolTip Background="#1E1E1E">
                            <TextBlock Background="#1E1E1E" Foreground="#F1F1F1">Reconnect after a few minutes and start the last script.</TextBlock>
                        </ToolTip>
                    </CheckBox.ToolTip>
                </CheckBox>
            </WrapPanel>
        </Grid>
        <Grid Grid.Row="3">
            <Grid.RowDefinitions>
                <RowDefinition x:Name="MainViewArea" Height="2*"/>
                <RowDefinition x:Name="LogWindowArea" Height="*"/>
                <RowDefinition Height="auto" />
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="3*"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <local:ResizeAbleControl Grid.RowSpan="2" Margin="5 0 0 6" Grid.Column="0" Grid.Row="0" x:Name="TabsWindow" LostFocus="TabWindow_LostFocus"/>
            <GridSplitter x:Name="TabWindowResizer" Grid.RowSpan="2" Grid.Row="0" Grid.Column="0"  Height="Auto" Width="5" Background="#2D2D30"/>
            <local:LogWindow Grid.Row="1" Grid.ColumnSpan="2" Width="auto" Grid.Column="1" Margin="0 5 6 5" x:Name="LogWindow"/>
            <GridSplitter x:Name="LogWindowResizer" HorizontalAlignment="Stretch" VerticalAlignment="Top" Grid.ColumnSpan="2" Grid.Column="1" Grid.Row="1"  Height="5" Width="auto" Background="#2D2D30"/>
            <local:CustomeTab x:Name="MainView" Grid.Row="0" Grid.Column="1" Grid.ColumnSpan="2" Height="Auto" Margin="0 6 6 0" />
        </Grid>
    </Grid>
</Window>
